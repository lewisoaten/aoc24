from . import challenge


def test_parse_input1():
    input = challenge.parse_input(
        """
###############
#...#...#.....#
#.#.#.#.#.###.#
#S#...#.#.#...#
#######.#.#.###
#######.#.#...#
#######.#.###.#
###..E#...#...#
###.#######.###
#...###...#...#
#.#####.#.###.#
#.#...#.#.#...#
#.#.#.#.#.#.###
#...#...#...###
###############
""".strip()
    )
    assert input == (
        ["#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#"],
        ["#", ".", ".", ".", "#", ".", ".", ".", "#", ".", ".", ".", ".", ".", "#"],
        ["#", ".", "#", ".", "#", ".", "#", ".", "#", ".", "#", "#", "#", ".", "#"],
        ["#", "S", "#", ".", ".", ".", "#", ".", "#", ".", "#", ".", ".", ".", "#"],
        ["#", "#", "#", "#", "#", "#", "#", ".", "#", ".", "#", ".", "#", "#", "#"],
        ["#", "#", "#", "#", "#", "#", "#", ".", "#", ".", "#", ".", ".", ".", "#"],
        ["#", "#", "#", "#", "#", "#", "#", ".", "#", ".", "#", "#", "#", ".", "#"],
        ["#", "#", "#", ".", ".", "E", "#", ".", ".", ".", "#", ".", ".", ".", "#"],
        ["#", "#", "#", ".", "#", "#", "#", "#", "#", "#", "#", ".", "#", "#", "#"],
        ["#", ".", ".", ".", "#", "#", "#", ".", ".", ".", "#", ".", ".", ".", "#"],
        ["#", ".", "#", "#", "#", "#", "#", ".", "#", ".", "#", "#", "#", ".", "#"],
        ["#", ".", "#", ".", ".", ".", "#", ".", "#", ".", "#", ".", ".", ".", "#"],
        ["#", ".", "#", ".", "#", ".", "#", ".", "#", ".", "#", ".", "#", "#", "#"],
        ["#", ".", ".", ".", "#", ".", ".", ".", "#", ".", ".", ".", "#", "#", "#"],
        ["#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#"],
    )


def test_find_path1():
    input = challenge.parse_input(
        """
###############
#...#...#.....#
#.#.#.#.#.###.#
#S#...#.#.#...#
#######.#.#.###
#######.#.#...#
#######.#.###.#
###..E#...#...#
###.#######.###
#...###...#...#
#.#####.#.###.#
#.#...#.#.#...#
#.#.#.#.#.#.###
#...#...#...###
###############
""".strip()
    )

    start = challenge.find_position(input, "S")
    end = challenge.find_position(input, "E")

    assert len(challenge.find_path(input, start, end)) == 85


def test_find_path2():
    input = challenge.parse_input(
        """
#####
#S#E#
#...#
#####
""".strip()
    )

    start = challenge.find_position(input, "S")
    end = challenge.find_position(input, "E")

    assert len(challenge.find_path(input, start, end)) == 5


def test_find_path3():
    input = challenge.parse_input(
        """
#####
#S#E#
#####
""".strip()
    )

    start = challenge.find_position(input, "S")
    end = challenge.find_position(input, "E")

    assert len(challenge.find_path(input, start, end)) == 0


def test_find_single_thickness_wall():
    input = challenge.parse_input(
        """
#####
#S#E#
#...#
#####
""".strip()
    )

    assert challenge.find_single_thickness_wall((1, 1), input) == {(1, 1): [(3, 1)]}
    assert challenge.find_single_thickness_wall((1, 2), input) == {}


def test_challenge1():
    input = challenge.parse_input(
        """
#####
#S#E#
#...#
#####
""".strip()
    )

    assert challenge.process(input, save_picoseconds=2) == 1


def test_challenge2():
    input = challenge.parse_input(
        """
###############
#...#...#.....#
#.#.#.#.#.###.#
#S#...#.#.#...#
#######.#.#.###
#######.#.#...#
#######.#.###.#
###..E#...#...#
###.#######.###
#...###...#...#
#.#####.#.###.#
#.#...#.#.#...#
#.#.#.#.#.#.###
#...#...#...###
###############
""".strip()
    )

    assert challenge.process(input, save_picoseconds=2) == 44


def test_challenge3():
    input = challenge.parse_input(
        """
###############
#...#...#.....#
#.#.#.#.#.###.#
#S#...#.#.#...#
#######.#.#.###
#######.#.#...#
#######.#.###.#
###..E#...#...#
###.#######.###
#...###...#...#
#.#####.#.###.#
#.#...#.#.#...#
#.#.#.#.#.#.###
#...#...#...###
###############
""".strip()
    )

    assert challenge.process(input, save_picoseconds=4) == 30
